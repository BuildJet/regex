name: ci
on: push
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, TARGET is set to `--target matrix.target`.
      TARGET:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - pinned
        - stable
        - stable-32
        - stable-mips
        - beta
        - nightly
        - macos
        - win-msvc
        - win-gnu
        include:
        - build: stable
          os: buildjet-2vcpu-ubuntu-2204
          rust: stable
        - build: stable
          os: ubuntu-latest
          rust: stable
        - build: stable
          os: buildjet-4vcpu-ubuntu-2204
          rust: stable
        - build: stable
          os: buildjet-8vcpu-ubuntu-2204
          rust: stable

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install and configure Cross
      if: matrix.target != ''
      run: |
        # We used to install 'cross' from master, but it kept failing. So now
        # we build from a known-good version until 'cross' becomes more stable
        # or we find an alternative. Notably, between v0.2.1 and current
        # master (2022-06-14), the number of Cross's dependencies has doubled.
        cargo install --bins --git https://github.com/rust-embedded/cross --tag v0.2.1
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET=--target ${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET }}"

    - name: Show CPU info for debugging
      if: matrix.os == 'ubuntu-latest'
      run: lscpu

    - name: Basic build
      run: ${{ env.CARGO }} build --verbose $TARGET

    - name: Build docs
      run: ${{ env.CARGO }} doc --verbose $TARGET

    # Our dev dependencies evolve more rapidly than we'd like, so only run
    # tests when we aren't pinning the Rust version.
    #
    # Also, our "full" test suite does quite a lot of work, so we only run it
    # on one build. Otherwise, we just run the "default" set of tests.
    - name: Run subset of tests
      if: matrix.build != 'pinned' && matrix.build != 'stable'
      run: ${{ env.CARGO }} test --verbose --test default $TARGET

    - name: Run full test suite
      if: matrix.build == 'stable'
      # 'stable' is Linux only, so we have bash.
      run: ./test

    - name: Run randomized tests against regexes from the wild
      if: matrix.build == 'stable'
      run: |
        # We run the tests in release mode since it winds up being faster.
        RUST_REGEX_RANDOM_TEST=1 ${{ env.CARGO }} test --release --verbose --test crates-regex $TARGET

    - name: Build regex-syntax docs
      if: matrix.build != 'pinned'
      run: |
        ${{ env.CARGO }} doc --verbose --manifest-path regex-syntax/Cargo.toml $TARGET

    - name: Run subset of regex-syntax tests
      if: matrix.build != 'pinned' && matrix.build != 'stable'
      run: |
        ${{ env.CARGO }} test --verbose --manifest-path regex-syntax/Cargo.toml $TARGET

    - name: Run full regex-syntax test suite
      if: matrix.build == 'stable'
      run: |
        # 'stable' is Linux only, so we have bash.
        cd regex-syntax
        ./test

    - name: Run regex-capi tests
      if: matrix.build == 'stable'
      run: |
        # 'stable' is Linux only, so we have bash.
        cd regex-capi
        ./test

    - if: matrix.build == 'nightly'
      name: Run benchmarks as tests
      run: |
        cd bench
        ./run rust --no-run --verbose

    - if: matrix.build == 'nightly'
      name: Run tests with pattern feature
      run: |
        cargo test --test default --no-default-features --features 'std pattern unicode-perl'

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
